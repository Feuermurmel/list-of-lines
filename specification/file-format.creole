= File Format

List-of-Lines defines that all {{{.lol}}} files are valid [[http://json.org/|JSON]] files with a specific structure, which is described in this chapter. This chapter makes use of JSON-specific terms such as //object//, //array//, //string// and so on. These terms should be interpreted with the meaning given to them in [[https://tools.ietf.org/html/rfc7159|RFC 7159]]. Where it would be ambiguous, the terms are prefixed with //JSON//, as in //JSON string// when they are used in that sense.

Following the use of JSON, {{{.lol}}} files contain a hierarchy of object of different types. Each of these types are described in their own section in this chapter. An {{{.lol}}} file aways contains a single, complete object of type {{{document}}}.


== Conventions used in examples


== Types

=== JSON Types 

The JSON specification defines the 4 types //object//, //array//, //number//, //string//, and the special values {{{null}}}, {{{true}}} and {{{false}}}. In this chapter, {{{<object>}}}, {{{<array>}}}, {{{<number>}}} and {{{<string>}}} is used to describe a JSON value of one of these types.

Additionally, {{{<bool>}}} is used to describe one of the values {{{true}}} or {{{false}}} and <integer> is used to describe a number which does not have a fractional part. Integers must be written without a decimal point and may not be written in scientific notation.

{{{
object := // A JSON object containing key-value-pairs.
array := // A JSON array containing a sequence of values.
number := // A number in decimal or scientific notation.
integer := // A number without a fractional part.
string := // A unicode string.
bool := true | false
}}}


=== Documents

{{{
document := {
	"version": "1",
	"attributes": <attributes>,
	"dimensions": 0 | 1 | 2 | 3,
	"coordinates": [ <coordinate> ... ]
	"layers": [ <layer> ... ]
}
}}}


Contains a number describin


=== Coordinates

* In a 0-dimensional file:

{{{
coordinate := []
}}}

* In a 1-dimensional file:

{{{
coordinate := [<coordinate-number>] | [<infinity>]
}}}

* In a 2-dimensional file:

{{{
coordinate := [<coordinate-number>, <coordinate-number>]
            | [<infinity>, <coordinate-number>]
            | [<coordinate-number>, <infinity>]

}}}

* In a 3-dimensional file:

{{{
coordinate := [<coordinate-number>, <coordinate-number>, <coordinate-number>]
            | [<infinity>, <coordinate-number>, <coordinate-number>]
            | [<coordinate-number>, <infinity>, <coordinate-number>]
            | [<coordinate-number>, <coordinate-number>, <infinity>]
}}}

{{{
coordinate-number := <number> | [<numerator>, <denominator>]
numerator := <integer>
denominator := <integer> // Must be positive.
infinity := "inf" | "-inf"
}}}


=== Layers

{{{
layer := {
	"name": <string>,
	"attributes": <attributes>,
	"cells": <cells>
}
}}}

* In a 0-dimensional file:

{{{
cells := [ [ <0-cell> ... ] ]
}}}

* In a 1-dimensional file:

{{{
cells := [ [ <1-cell> ... ], [ <0-cell> ... ] ]
}}}

* In a 2-dimensional file:

{{{
cells := [ [ <2-cell> ... ], [ <1-cell> ... ], [ <0-cell> ... ] ]
}}}

* In a 3-dimensional file:

{{{
cells := [ [ <3-cell> ... ], [ <2-cell> ... ], [ <1-cell> ... ], [ <0-cell> ... ] ]
}}}



=== Cells

{{{
0-cells := null | [ <index> ]
1-cells := null | [ <index>, <index> ]
2-cells := null | [ <index>, <index>, <index> ]
3-cells := null | [ <index>, <index>, <index>, <index> ]
index := <integer> // Must be non-negative.
}}}

For each type of cell possible in the number dimensions specified by the document, {{{<cells>}}} contains a separate array listing cells of those type. A 0-dimensional document only allows a single type of cell, a point, whose coordinate is given by single index into the list of coordinates specified for the document.

For a 0-dimensional document, because there is only one distinct coordinate ({{{[]}}}), the array may only contain no or a single entry. Thus, each layer in a 0-dimensional document can only specify one of 2 states: The absence or presence of the only possible point.

When using more dimensions, multiple coordinates are possible and the array of {{{<0-cells>}}} will list all points that are part of that layer. To not introduce a special case when reading and writing the list of points, the indexes of the coordinates used are all wrapped in an array of length one.

For each dimensions, a new type of cell is added. The object described by all cells are called [[https://en.wikipedia.org/wiki/simplexes|Simplex]] an are the objects with the minimum number of vertices describing a volume of a given dimension. Thus, the number of coordinates used to specify a cell of each type is fixed.

A simplex of zero dimensions is a point, specified using it's coordinate. A simplex of one dimension is a line segment, specified using the coordinates of it's 2 end points. A simplex if 2 dimensions is a triangle, specified using the coordinates of it's 3 corners. And a simplex of 3 dimensions is a tetrahedron, specified using the coordinates of it's 4 corners.

{{{<0-cells>}}}, {{{<1-cells>}}}, {{{<2-cells>}}} and {{{<3-cells>}}} list all the points, line segments, triangles and tetrahedra that make up the volume described by a layer. For each of those cells, the border is treated specially. The boundary of each specified simplex, which is comprised of simplexes of lower dimension, is **not** contained in the object described by the layer. If, for example, a rectangle is built up from 2 triangles, by default, the line segment connecting the 2 shared vertices of the rectangle would not be included in the area described the layer and the rectangle would actually not be a rectangle but just 2 unconnected triangles. TO connect these triangles, in general, that line segment gas to be included explicitly im {{{1-cells}}}.

For the very common case, where a volume, area or path is built up from a bunch of tetrahedra, triangles or line segments, without the need to specify any cells of lower dimension anywhere in the same layer, the arrays for those lower-dimensional cells can instead be replaced by {{{null}}}. Specifying {{{null}}} for any but the first of the arrays of cells has the following meaning: The cells of that type should be built up from the array of cell of the next larger dimension by taking the union of all boundary cells of that dimension.

For the example with the two triangles, leaving out the array of {{{1-cells}}} would mean that that array would be automatically filled with all 5 line segments describing the boundary of those triangles, which includes the line segment between the two triangles. In turn, leaving out the array of {{{0-cells}}} would then also add all 4 corner points to the set of cells contained in that layer.
